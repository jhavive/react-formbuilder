{"version":3,"file":"keysim.mjs","sources":["../node_modules/dom-element-is-natively-editable/index.js","../src/keysim.js"],"sourcesContent":["export default function (element) {\n  if (\n    element.ownerDocument.designMode &&\n    element.ownerDocument.designMode.toLowerCase() === 'on'\n  ) {\n    return true\n  }\n\n  switch (element.tagName.toLowerCase()) {\n    case 'input':\n      return isEditableInput(element)\n    case 'textarea':\n      return true\n  }\n\n  if (isContentEditable(element)) {\n    return true\n  }\n\n  return false\n}\n\nfunction isContentEditable (element) {\n  if (\n    element.contentEditable &&\n    element.contentEditable.toLowerCase() === 'true'\n  ) {\n    return true\n  }\n  if (\n    element.contentEditable &&\n    element.contentEditable.toLowerCase() === 'inherit' &&\n    element.parentNode\n  ) {\n    return isContentEditable(element.parentNode)\n  }\n  return false\n}\n\nfunction isEditableInput (input) {\n  switch (input.type) {\n    case 'text':\n      return true\n    case 'email':\n      return true\n    case 'password':\n      return true\n    case 'search':\n      return true\n    case 'tel':\n      return true\n    case 'url':\n      return true\n    default:\n      return false\n  }\n}\n","import isEditable from 'dom-element-is-natively-editable';\n\nconst CTRL = 1 << 0;\nconst META = 1 << 1;\nconst ALT = 1 << 2;\nconst SHIFT = 1 << 3;\n\n// Key Events\nexport const KeyEvents = {\n  DOWN: 1 << 0,\n  PRESS: 1 << 1,\n  UP: 1 << 2,\n  INPUT: 1 << 3\n};\nKeyEvents.ALL =\n  KeyEvents.DOWN | KeyEvents.PRESS | KeyEvents.UP | KeyEvents.INPUT;\n\n/**\n * Represents a keystroke, or a single key code with a set of active modifiers.\n */\nexport class Keystroke {\n  /**\n   * @param {number} modifiers A bitmask formed by CTRL, META, ALT, and SHIFT.\n   * @param {number} keyCode\n   */\n  constructor(modifiers, keyCode) {\n    this.modifiers = modifiers;\n    this.ctrlKey = !!(modifiers & CTRL);\n    this.metaKey = !!(modifiers & META);\n    this.altKey = !!(modifiers & ALT);\n    this.shiftKey = !!(modifiers & SHIFT);\n    this.keyCode = keyCode;\n  }\n\n  /**\n   * Gets the bitmask value for the \"control\" modifier.\n   *\n   * @type {number}\n   */\n  static CTRL = CTRL;\n\n  /**\n   * Gets the bitmask value for the \"meta\" modifier.\n   *\n   * @return {number}\n   */\n  static META = META;\n\n  /**\n   * Gets the bitmask value for the \"alt\" modifier.\n   *\n   * @return {number}\n   */\n  static ALT = ALT;\n\n  /**\n   * Gets the bitmask value for the \"shift\" modifier.\n   *\n   * @return {number}\n   */\n  static SHIFT = SHIFT;\n}\n\n/**\n * @typedef {\"keydown\" | \"keypress\" | \"keyup\" | \"textInput\" | \"input\"} KeyEventsName\n */\n\n/**\n * Simulates a keyboard with a particular key-to-character and key-to-action\n * mapping. Use `US_ENGLISH` to get a pre-configured keyboard.\n */\nexport class Keyboard {\n  /**\n   * @param {Object.<number, Keystroke>} charCodeKeyCodeMap\n   * @param {Object.<string, number>} actionKeyCodeMap\n   */\n  constructor(charCodeKeyCodeMap, actionKeyCodeMap) {\n    this._charCodeKeyCodeMap = charCodeKeyCodeMap;\n    this._actionKeyCodeMap = actionKeyCodeMap;\n  }\n\n  /**\n   * Determines the character code generated by pressing the given keystroke.\n   *\n   * @param {Keystroke} keystroke\n   * @return {?number}\n   */\n  charCodeForKeystroke(keystroke) {\n    let map = this._charCodeKeyCodeMap;\n    for (let charCode in map) {\n      if (Object.prototype.hasOwnProperty.call(map, charCode)) {\n        let keystrokeForCharCode = map[charCode];\n        if (\n          keystroke.keyCode === keystrokeForCharCode.keyCode &&\n          keystroke.modifiers === keystrokeForCharCode.modifiers\n        ) {\n          return parseInt(charCode, 10);\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Creates an event ready for dispatching onto the given target.\n   *\n   * @param {KeyEventsName} type\n   * @param {Keystroke} keystroke\n   * @param {HTMLElement} target\n   * @return {Event}\n   */\n  createEventFromKeystroke(type, keystroke, target) {\n    const document = target.ownerDocument;\n    const window = document.defaultView;\n    const Event = window.Event;\n\n    let event;\n\n    try {\n      event = new Event(type);\n    } catch (e) {\n      event = document.createEvent('UIEvents');\n    }\n\n    event.initEvent(type, true, true);\n\n    switch (type) {\n      case 'textInput':\n      case 'input':\n        event.data = String.fromCharCode(this.charCodeForKeystroke(keystroke));\n        break;\n\n      case 'keydown':\n      case 'keypress':\n      case 'keyup':\n        event.shiftKey = keystroke.shiftKey;\n        event.altKey = keystroke.altKey;\n        event.metaKey = keystroke.metaKey;\n        event.ctrlKey = keystroke.ctrlKey;\n        event.keyCode =\n          type === 'keypress'\n            ? this.charCodeForKeystroke(keystroke)\n            : keystroke.keyCode;\n        event.charCode = type === 'keypress' ? event.keyCode : 0;\n        event.which = event.keyCode;\n        break;\n    }\n\n    return event;\n  }\n\n  /**\n   * Fires the correct sequence of events on the given target as if the given\n   * action was undertaken by a human.\n   *\n   * @param {string} action e.g. \"alt+shift+left\" or \"backspace\"\n   * @param {HTMLElement} target\n   */\n  dispatchEventsForAction(action, target) {\n    const keystroke = this.keystrokeForAction(action);\n    this.dispatchEventsForKeystroke(keystroke, target);\n  }\n\n  /**\n   * Fires the correct sequence of events on the given target as if the given\n   * input had been typed by a human.\n   *\n   * @param {string} input\n   * @param {HTMLElement} target\n   */\n  dispatchEventsForInput(input, target) {\n    let currentModifierState = 0;\n    for (let i = 0, length = input.length; i < length; i++) {\n      const keystroke = this.keystrokeForCharCode(input.charCodeAt(i));\n      this.dispatchModifierStateTransition(\n        target,\n        currentModifierState,\n        keystroke.modifiers\n      );\n      this.dispatchEventsForKeystroke(keystroke, target, false);\n      currentModifierState = keystroke.modifiers;\n    }\n    this.dispatchModifierStateTransition(target, currentModifierState, 0);\n  }\n\n  /**\n   * Fires the correct sequence of events on the given target as if the given\n   * keystroke was performed by a human. When simulating, for example, typing\n   * the letter \"A\" (assuming a U.S. English keyboard) then the sequence will\n   * look like this:\n   *\n   *   keydown   keyCode=16 (SHIFT) charCode=0      shiftKey=true\n   *   keydown   keyCode=65 (A)     charCode=0      shiftKey=true\n   *   keypress  keyCode=65 (A)     charCode=65 (A) shiftKey=true\n   *   textInput data=A\n   *   input     data=A\n   *   keyup     keyCode=65 (A)     charCode=0      shiftKey=true\n   *   keyup     keyCode=16 (SHIFT) charCode=0      shiftKey=false\n   *\n   * If the keystroke would not cause a character to be input, such as when\n   * pressing alt+shift+left, the sequence looks like this:\n   *\n   *   keydown   keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=true\n   *   keydown   keyCode=18 (ALT)   charCode=0 altKey=true  shiftKey=true\n   *   keydown   keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true\n   *   keyup     keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true\n   *   keyup     keyCode=18 (ALT)   charCode=0 altKey=false shiftKey=true\n   *   keyup     keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=false\n   *\n   * To disable handling of modifier keys, call with `transitionModifers` set\n   * to false. Doing so will omit the keydown and keyup events associated with\n   * shift, ctrl, alt, and meta keys surrounding the actual keystroke.\n   *\n   * @param {Keystroke} keystroke\n   * @param {HTMLElement} target\n   * @param {boolean=} transitionModifiers\n   * @param {number} events\n   */\n  dispatchEventsForKeystroke(\n    keystroke,\n    target,\n    transitionModifiers = true,\n    events = KeyEvents.ALL\n  ) {\n    if (transitionModifiers) {\n      this.dispatchModifierStateTransition(\n        target,\n        0,\n        keystroke.modifiers,\n        events\n      );\n    }\n\n    let keydownEvent;\n    if (events & KeyEvents.DOWN) {\n      keydownEvent = this.createEventFromKeystroke(\n        'keydown',\n        keystroke,\n        target\n      );\n    }\n\n    if (\n      keydownEvent &&\n      target.dispatchEvent(keydownEvent) &&\n      this.targetCanReceiveTextInput(target)\n    ) {\n      let keypressEvent;\n      if (events & KeyEvents.PRESS) {\n        keypressEvent = this.createEventFromKeystroke(\n          'keypress',\n          keystroke,\n          target\n        );\n      }\n      if (\n        keypressEvent &&\n        keypressEvent.charCode &&\n        target.dispatchEvent(keypressEvent)\n      ) {\n        if (events & KeyEvents.INPUT) {\n          const textinputEvent = this.createEventFromKeystroke(\n            'textInput',\n            keystroke,\n            target\n          );\n          target.dispatchEvent(textinputEvent);\n\n          const inputEvent = this.createEventFromKeystroke(\n            'input',\n            keystroke,\n            target\n          );\n          target.dispatchEvent(inputEvent);\n        }\n      }\n    }\n\n    if (events & KeyEvents.UP) {\n      const keyupEvent = this.createEventFromKeystroke(\n        'keyup',\n        keystroke,\n        target\n      );\n      target.dispatchEvent(keyupEvent);\n    }\n\n    if (transitionModifiers) {\n      this.dispatchModifierStateTransition(target, keystroke.modifiers, 0);\n    }\n  }\n\n  /**\n   * Transitions from one modifier state to another by dispatching key events.\n   *\n   * @param {EventTarget} target\n   * @param {number} fromModifierState\n   * @param {number} toModifierState\n   * @param {number} events\n   * @private\n   */\n  dispatchModifierStateTransition(\n    target,\n    fromModifierState,\n    toModifierState,\n    events = KeyEvents.ALL\n  ) {\n    let currentModifierState = fromModifierState;\n    let didHaveMeta = (fromModifierState & META) === META;\n    let willHaveMeta = (toModifierState & META) === META;\n    let didHaveCtrl = (fromModifierState & CTRL) === CTRL;\n    let willHaveCtrl = (toModifierState & CTRL) === CTRL;\n    let didHaveShift = (fromModifierState & SHIFT) === SHIFT;\n    let willHaveShift = (toModifierState & SHIFT) === SHIFT;\n    let didHaveAlt = (fromModifierState & ALT) === ALT;\n    let willHaveAlt = (toModifierState & ALT) === ALT;\n\n    const includeKeyUp = events & KeyEvents.UP;\n    const includeKeyDown = events & KeyEvents.DOWN;\n\n    if (includeKeyUp && didHaveMeta === true && willHaveMeta === false) {\n      // Release the meta key.\n      currentModifierState &= ~META;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keyup',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.META),\n          target\n        )\n      );\n    }\n\n    if (includeKeyUp && didHaveCtrl === true && willHaveCtrl === false) {\n      // Release the ctrl key.\n      currentModifierState &= ~CTRL;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keyup',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL),\n          target\n        )\n      );\n    }\n\n    if (includeKeyUp && didHaveShift === true && willHaveShift === false) {\n      // Release the shift key.\n      currentModifierState &= ~SHIFT;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keyup',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT),\n          target\n        )\n      );\n    }\n\n    if (includeKeyUp && didHaveAlt === true && willHaveAlt === false) {\n      // Release the alt key.\n      currentModifierState &= ~ALT;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keyup',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT),\n          target\n        )\n      );\n    }\n\n    if (includeKeyDown && didHaveMeta === false && willHaveMeta === true) {\n      // Press the meta key.\n      currentModifierState |= META;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keydown',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.META),\n          target\n        )\n      );\n    }\n\n    if (includeKeyDown && didHaveCtrl === false && willHaveCtrl === true) {\n      // Press the ctrl key.\n      currentModifierState |= CTRL;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keydown',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL),\n          target\n        )\n      );\n    }\n\n    if (includeKeyDown && didHaveShift === false && willHaveShift === true) {\n      // Press the shift key.\n      currentModifierState |= SHIFT;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keydown',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT),\n          target\n        )\n      );\n    }\n\n    if (includeKeyDown && didHaveAlt === false && willHaveAlt === true) {\n      // Press the alt key.\n      currentModifierState |= ALT;\n      target.dispatchEvent(\n        this.createEventFromKeystroke(\n          'keydown',\n          new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT),\n          target\n        )\n      );\n    }\n\n    if (currentModifierState !== toModifierState) {\n      throw new Error(\n        `internal error, expected modifier state: ${toModifierState}` +\n          `, got: ${currentModifierState}`\n      );\n    }\n  }\n\n  /**\n   * Returns the keystroke associated with the given action.\n   *\n   * @param {string} action\n   * @return {?Keystroke}\n   */\n  keystrokeForAction(action) {\n    let keyCode = null;\n    let modifiers = 0;\n\n    let parts = action.split('+');\n    let lastPart = parts.pop();\n\n    parts.forEach(part => {\n      switch (part.toUpperCase()) {\n        case 'CTRL':\n          modifiers |= CTRL;\n          break;\n        case 'META':\n          modifiers |= META;\n          break;\n        case 'ALT':\n          modifiers |= ALT;\n          break;\n        case 'SHIFT':\n          modifiers |= SHIFT;\n          break;\n        default:\n          throw new Error(`in \"${action}\", invalid modifier: ${part}`);\n      }\n    });\n\n    if (lastPart.toUpperCase() in this._actionKeyCodeMap) {\n      keyCode = this._actionKeyCodeMap[lastPart.toUpperCase()];\n    } else if (lastPart.length === 1) {\n      let lastPartKeystroke = this.keystrokeForCharCode(lastPart.charCodeAt(0));\n      modifiers |= lastPartKeystroke.modifiers;\n      keyCode = lastPartKeystroke.keyCode;\n    } else {\n      throw new Error(`in \"${action}\", invalid action: ${lastPart}`);\n    }\n\n    return new Keystroke(modifiers, keyCode);\n  }\n\n  /**\n   * Gets the keystroke used to generate the given character code.\n   *\n   * @param {number} charCode\n   * @return {?Keystroke}\n   */\n  keystrokeForCharCode(charCode) {\n    return this._charCodeKeyCodeMap[charCode] || null;\n  }\n\n  /**\n   * @param {EventTarget} target\n   * @private\n   */\n  targetCanReceiveTextInput(target) {\n    if (!target) {\n      return false;\n    }\n\n    return isEditable(target);\n  }\n}\n\nconst US_ENGLISH_CHARCODE_KEYCODE_MAP = {\n  32: new Keystroke(0, 32), // <space>\n  33: new Keystroke(SHIFT, 49), // !\n  34: new Keystroke(SHIFT, 222), // \"\n  35: new Keystroke(SHIFT, 51), // #\n  36: new Keystroke(SHIFT, 52), // $\n  37: new Keystroke(SHIFT, 53), // %\n  38: new Keystroke(SHIFT, 55), // &\n  39: new Keystroke(0, 222), // '\n  40: new Keystroke(SHIFT, 57), // (\n  41: new Keystroke(SHIFT, 48), // )\n  42: new Keystroke(SHIFT, 56), // *\n  43: new Keystroke(SHIFT, 187), // +\n  44: new Keystroke(0, 188), // ,\n  45: new Keystroke(0, 189), // -\n  46: new Keystroke(0, 190), // .\n  47: new Keystroke(0, 191), // /\n  48: new Keystroke(0, 48), // 0\n  49: new Keystroke(0, 49), // 1\n  50: new Keystroke(0, 50), // 2\n  51: new Keystroke(0, 51), // 3\n  52: new Keystroke(0, 52), // 4\n  53: new Keystroke(0, 53), // 5\n  54: new Keystroke(0, 54), // 6\n  55: new Keystroke(0, 55), // 7\n  56: new Keystroke(0, 56), // 8\n  57: new Keystroke(0, 57), // 9\n  58: new Keystroke(SHIFT, 186), // :\n  59: new Keystroke(0, 186), // ;\n  60: new Keystroke(SHIFT, 188), // <\n  61: new Keystroke(0, 187), // =\n  62: new Keystroke(SHIFT, 190), // >\n  63: new Keystroke(SHIFT, 191), // ?\n  64: new Keystroke(SHIFT, 50), // @\n  65: new Keystroke(SHIFT, 65), // A\n  66: new Keystroke(SHIFT, 66), // B\n  67: new Keystroke(SHIFT, 67), // C\n  68: new Keystroke(SHIFT, 68), // D\n  69: new Keystroke(SHIFT, 69), // E\n  70: new Keystroke(SHIFT, 70), // F\n  71: new Keystroke(SHIFT, 71), // G\n  72: new Keystroke(SHIFT, 72), // H\n  73: new Keystroke(SHIFT, 73), // I\n  74: new Keystroke(SHIFT, 74), // J\n  75: new Keystroke(SHIFT, 75), // K\n  76: new Keystroke(SHIFT, 76), // L\n  77: new Keystroke(SHIFT, 77), // M\n  78: new Keystroke(SHIFT, 78), // N\n  79: new Keystroke(SHIFT, 79), // O\n  80: new Keystroke(SHIFT, 80), // P\n  81: new Keystroke(SHIFT, 81), // Q\n  82: new Keystroke(SHIFT, 82), // R\n  83: new Keystroke(SHIFT, 83), // S\n  84: new Keystroke(SHIFT, 84), // T\n  85: new Keystroke(SHIFT, 85), // U\n  86: new Keystroke(SHIFT, 86), // V\n  87: new Keystroke(SHIFT, 87), // W\n  88: new Keystroke(SHIFT, 88), // X\n  89: new Keystroke(SHIFT, 89), // Y\n  90: new Keystroke(SHIFT, 90), // Z\n  91: new Keystroke(0, 219), // [\n  92: new Keystroke(0, 220), // \\\n  93: new Keystroke(0, 221), // ]\n  94: new Keystroke(SHIFT, 54), // ^\n  95: new Keystroke(SHIFT, 189), // _\n  96: new Keystroke(0, 192), // `\n  97: new Keystroke(0, 65), // a\n  98: new Keystroke(0, 66), // b\n  99: new Keystroke(0, 67), // c\n  100: new Keystroke(0, 68), // d\n  101: new Keystroke(0, 69), // e\n  102: new Keystroke(0, 70), // f\n  103: new Keystroke(0, 71), // g\n  104: new Keystroke(0, 72), // h\n  105: new Keystroke(0, 73), // i\n  106: new Keystroke(0, 74), // j\n  107: new Keystroke(0, 75), // k\n  108: new Keystroke(0, 76), // l\n  109: new Keystroke(0, 77), // m\n  110: new Keystroke(0, 78), // n\n  111: new Keystroke(0, 79), // o\n  112: new Keystroke(0, 80), // p\n  113: new Keystroke(0, 81), // q\n  114: new Keystroke(0, 82), // r\n  115: new Keystroke(0, 83), // s\n  116: new Keystroke(0, 84), // t\n  117: new Keystroke(0, 85), // u\n  118: new Keystroke(0, 86), // v\n  119: new Keystroke(0, 87), // w\n  120: new Keystroke(0, 88), // x\n  121: new Keystroke(0, 89), // y\n  122: new Keystroke(0, 90), // z\n  123: new Keystroke(SHIFT, 219), // {\n  124: new Keystroke(SHIFT, 220), // |\n  125: new Keystroke(SHIFT, 221), // }\n  126: new Keystroke(SHIFT, 192) // ~\n};\n\nconst US_ENGLISH_ACTION_KEYCODE_MAP = {\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  PAUSE: 19,\n  CAPSLOCK: 20,\n  ESCAPE: 27,\n  PAGEUP: 33,\n  PAGEDOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  INSERT: 45,\n  DELETE: 46,\n  META: 91,\n  F1: 112,\n  F2: 113,\n  F3: 114,\n  F4: 115,\n  F5: 116,\n  F6: 117,\n  F7: 118,\n  F8: 119,\n  F9: 120,\n  F10: 121,\n  F11: 122,\n  F12: 123\n};\n\n/**\n * Gets a keyboard instance configured as a U.S. English keyboard would be.\n *\n * @return {Keyboard}\n */\nKeyboard.US_ENGLISH = new Keyboard(\n  US_ENGLISH_CHARCODE_KEYCODE_MAP,\n  US_ENGLISH_ACTION_KEYCODE_MAP\n);\n"],"names":["element","ownerDocument","designMode","toLowerCase","tagName","isEditableInput","isContentEditable","contentEditable","parentNode","input","type","CTRL","META","ALT","SHIFT","KeyEvents","ALL","DOWN","PRESS","UP","INPUT","Keystroke","modifiers","keyCode","ctrlKey","metaKey","altKey","shiftKey","Keyboard","charCodeKeyCodeMap","actionKeyCodeMap","_charCodeKeyCodeMap","_actionKeyCodeMap","keystroke","map","charCode","Object","prototype","hasOwnProperty","call","keystrokeForCharCode","parseInt","target","document","window","defaultView","Event","event","e","createEvent","initEvent","data","String","fromCharCode","charCodeForKeystroke","which","action","keystrokeForAction","dispatchEventsForKeystroke","currentModifierState","i","length","charCodeAt","dispatchModifierStateTransition","transitionModifiers","events","keydownEvent","createEventFromKeystroke","dispatchEvent","targetCanReceiveTextInput","keypressEvent","textinputEvent","inputEvent","keyupEvent","fromModifierState","toModifierState","didHaveMeta","willHaveMeta","didHaveCtrl","willHaveCtrl","didHaveShift","willHaveShift","didHaveAlt","willHaveAlt","includeKeyUp","includeKeyDown","Error","parts","split","lastPart","pop","forEach","part","toUpperCase","lastPartKeystroke","isEditable","US_ENGLISH_CHARCODE_KEYCODE_MAP","US_ENGLISH_ACTION_KEYCODE_MAP","US_ENGLISH"],"mappings":"AAAe,qBAAUA,OAAV,EAAmB;MAE9BA,QAAQC,aAAR,CAAsBC,UAAtB,IACAF,QAAQC,aAAR,CAAsBC,UAAtB,CAAiCC,WAAjC,OAAmD,IAFrD,EAGE;WACO,IAAP;;;UAGMH,QAAQI,OAAR,CAAgBD,WAAhB,EAAR;SACO,OAAL;aACSE,gBAAgBL,OAAhB,CAAP;SACG,UAAL;aACS,IAAP;;;MAGAM,kBAAkBN,OAAlB,CAAJ,EAAgC;WACvB,IAAP;;;SAGK,KAAP;;;AAGF,SAASM,iBAAT,CAA4BN,OAA5B,EAAqC;MAEjCA,QAAQO,eAAR,IACAP,QAAQO,eAAR,CAAwBJ,WAAxB,OAA0C,MAF5C,EAGE;WACO,IAAP;;MAGAH,QAAQO,eAAR,IACAP,QAAQO,eAAR,CAAwBJ,WAAxB,OAA0C,SAD1C,IAEAH,QAAQQ,UAHV,EAIE;WACOF,kBAAkBN,QAAQQ,UAA1B,CAAP;;SAEK,KAAP;;;AAGF,SAASH,eAAT,CAA0BI,KAA1B,EAAiC;UACvBA,MAAMC,IAAd;SACO,MAAL;aACS,IAAP;SACG,OAAL;aACS,IAAP;SACG,UAAL;aACS,IAAP;SACG,QAAL;aACS,IAAP;SACG,KAAL;aACS,IAAP;SACG,KAAL;aACS,IAAP;;aAEO,KAAP;;;;;;;;ACpDN,IAAMC,OAAO,KAAK,CAAlB;AACA,IAAMC,OAAO,KAAK,CAAlB;AACA,IAAMC,MAAM,KAAK,CAAjB;AACA,IAAMC,QAAQ,KAAK,CAAnB;;;AAGA,IAAaC,YAAY;QACjB,KAAK,CADY;SAEhB,KAAK,CAFW;MAGnB,KAAK,CAHc;SAIhB,KAAK;CAJP;AAMPA,UAAUC,GAAV,GACED,UAAUE,IAAV,GAAiBF,UAAUG,KAA3B,GAAmCH,UAAUI,EAA7C,GAAkDJ,UAAUK,KAD9D;;;;;AAMA,IAAaC,SAAb;;;;;AAKE,mBAAYC,SAAZ,EAAuBC,OAAvB,EAAgC;;;OACzBD,SAAL,GAAiBA,SAAjB;OACKE,OAAL,GAAe,CAAC,EAAEF,YAAYX,IAAd,CAAhB;OACKc,OAAL,GAAe,CAAC,EAAEH,YAAYV,IAAd,CAAhB;OACKc,MAAL,GAAc,CAAC,EAAEJ,YAAYT,GAAd,CAAf;OACKc,QAAL,GAAgB,CAAC,EAAEL,YAAYR,KAAd,CAAjB;OACKS,OAAL,GAAeA,OAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAXJ;;;;;;;;;;AAAaF,UAmBJV,OAAOA;AAnBHU,UA0BJT,OAAOA;AA1BHS,UAiCJR,MAAMA;AAjCFQ,UAwCJP,QAAQA;AAWjB,IAAac,QAAb;;;;;oBAKcC,kBAAZ,EAAgCC,gBAAhC,EAAkD;;;SAC3CC,mBAAL,GAA2BF,kBAA3B;SACKG,iBAAL,GAAyBF,gBAAzB;;;;;;;;;;;;;yCASmBG,SAhBvB,EAgBkC;UAC1BC,MAAM,KAAKH,mBAAf;WACK,IAAII,QAAT,IAAqBD,GAArB,EAA0B;YACpBE,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,GAArC,EAA0CC,QAA1C,CAAJ,EAAyD;cACnDK,uBAAuBN,IAAIC,QAAJ,CAA3B;cAEEF,UAAUV,OAAV,KAAsBiB,qBAAqBjB,OAA3C,IACAU,UAAUX,SAAV,KAAwBkB,qBAAqBlB,SAF/C,EAGE;mBACOmB,SAASN,QAAT,EAAmB,EAAnB,CAAP;;;;aAIC,IAAP;;;;;;;;;;;;;;6CAWuBzB,IAxC3B,EAwCiCuB,SAxCjC,EAwC4CS,MAxC5C,EAwCoD;UAC1CC,WAAWD,OAAOzC,aAAxB;UACM2C,SAASD,SAASE,WAAxB;UACMC,QAAQF,OAAOE,KAArB;;UAEIC,cAAJ;;UAEI;gBACM,IAAID,KAAJ,CAAUpC,IAAV,CAAR;OADF,CAEE,OAAOsC,CAAP,EAAU;gBACFL,SAASM,WAAT,CAAqB,UAArB,CAAR;;;YAGIC,SAAN,CAAgBxC,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B;;cAEQA,IAAR;aACO,WAAL;aACK,OAAL;gBACQyC,IAAN,GAAaC,OAAOC,YAAP,CAAoB,KAAKC,oBAAL,CAA0BrB,SAA1B,CAApB,CAAb;;;aAGG,SAAL;aACK,UAAL;aACK,OAAL;gBACQN,QAAN,GAAiBM,UAAUN,QAA3B;gBACMD,MAAN,GAAeO,UAAUP,MAAzB;gBACMD,OAAN,GAAgBQ,UAAUR,OAA1B;gBACMD,OAAN,GAAgBS,UAAUT,OAA1B;gBACMD,OAAN,GACEb,SAAS,UAAT,GACI,KAAK4C,oBAAL,CAA0BrB,SAA1B,CADJ,GAEIA,UAAUV,OAHhB;gBAIMY,QAAN,GAAiBzB,SAAS,UAAT,GAAsBqC,MAAMxB,OAA5B,GAAsC,CAAvD;gBACMgC,KAAN,GAAcR,MAAMxB,OAApB;;;;aAIGwB,KAAP;;;;;;;;;;;;;4CAUsBS,MAvF1B,EAuFkCd,MAvFlC,EAuF0C;UAChCT,YAAY,KAAKwB,kBAAL,CAAwBD,MAAxB,CAAlB;WACKE,0BAAL,CAAgCzB,SAAhC,EAA2CS,MAA3C;;;;;;;;;;;;;2CAUqBjC,KAnGzB,EAmGgCiC,MAnGhC,EAmGwC;UAChCiB,uBAAuB,CAA3B;WACK,IAAIC,IAAI,CAAR,EAAWC,SAASpD,MAAMoD,MAA/B,EAAuCD,IAAIC,MAA3C,EAAmDD,GAAnD,EAAwD;YAChD3B,YAAY,KAAKO,oBAAL,CAA0B/B,MAAMqD,UAAN,CAAiBF,CAAjB,CAA1B,CAAlB;aACKG,+BAAL,CACErB,MADF,EAEEiB,oBAFF,EAGE1B,UAAUX,SAHZ;aAKKoC,0BAAL,CAAgCzB,SAAhC,EAA2CS,MAA3C,EAAmD,KAAnD;+BACuBT,UAAUX,SAAjC;;WAEGyC,+BAAL,CAAqCrB,MAArC,EAA6CiB,oBAA7C,EAAmE,CAAnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+CAqCA1B,SApJJ,EAqJIS,MArJJ,EAwJI;UAFAsB,mBAEA,uEAFsB,IAEtB;UADAC,MACA,uEADSlD,UAAUC,GACnB;;UACIgD,mBAAJ,EAAyB;aAClBD,+BAAL,CACErB,MADF,EAEE,CAFF,EAGET,UAAUX,SAHZ,EAIE2C,MAJF;;;UAQEC,qBAAJ;UACID,SAASlD,UAAUE,IAAvB,EAA6B;uBACZ,KAAKkD,wBAAL,CACb,SADa,EAEblC,SAFa,EAGbS,MAHa,CAAf;;;UAQAwB,gBACAxB,OAAO0B,aAAP,CAAqBF,YAArB,CADA,IAEA,KAAKG,yBAAL,CAA+B3B,MAA/B,CAHF,EAIE;YACI4B,sBAAJ;YACIL,SAASlD,UAAUG,KAAvB,EAA8B;0BACZ,KAAKiD,wBAAL,CACd,UADc,EAEdlC,SAFc,EAGdS,MAHc,CAAhB;;YAOA4B,iBACAA,cAAcnC,QADd,IAEAO,OAAO0B,aAAP,CAAqBE,aAArB,CAHF,EAIE;cACIL,SAASlD,UAAUK,KAAvB,EAA8B;gBACtBmD,iBAAiB,KAAKJ,wBAAL,CACrB,WADqB,EAErBlC,SAFqB,EAGrBS,MAHqB,CAAvB;mBAKO0B,aAAP,CAAqBG,cAArB;;gBAEMC,aAAa,KAAKL,wBAAL,CACjB,OADiB,EAEjBlC,SAFiB,EAGjBS,MAHiB,CAAnB;mBAKO0B,aAAP,CAAqBI,UAArB;;;;;UAKFP,SAASlD,UAAUI,EAAvB,EAA2B;YACnBsD,aAAa,KAAKN,wBAAL,CACjB,OADiB,EAEjBlC,SAFiB,EAGjBS,MAHiB,CAAnB;eAKO0B,aAAP,CAAqBK,UAArB;;;UAGET,mBAAJ,EAAyB;aAClBD,+BAAL,CAAqCrB,MAArC,EAA6CT,UAAUX,SAAvD,EAAkE,CAAlE;;;;;;;;;;;;;;;;oDAcFoB,MAvOJ,EAwOIgC,iBAxOJ,EAyOIC,eAzOJ,EA2OI;UADAV,MACA,uEADSlD,UAAUC,GACnB;;UACI2C,uBAAuBe,iBAA3B;UACIE,cAAc,CAACF,oBAAoB9D,IAArB,MAA+BA,IAAjD;UACIiE,eAAe,CAACF,kBAAkB/D,IAAnB,MAA6BA,IAAhD;UACIkE,cAAc,CAACJ,oBAAoB/D,IAArB,MAA+BA,IAAjD;UACIoE,eAAe,CAACJ,kBAAkBhE,IAAnB,MAA6BA,IAAhD;UACIqE,eAAe,CAACN,oBAAoB5D,KAArB,MAAgCA,KAAnD;UACImE,gBAAgB,CAACN,kBAAkB7D,KAAnB,MAA8BA,KAAlD;UACIoE,aAAa,CAACR,oBAAoB7D,GAArB,MAA8BA,GAA/C;UACIsE,cAAc,CAACR,kBAAkB9D,GAAnB,MAA4BA,GAA9C;;UAEMuE,eAAenB,SAASlD,UAAUI,EAAxC;UACMkE,iBAAiBpB,SAASlD,UAAUE,IAA1C;;UAEImE,gBAAgBR,gBAAgB,IAAhC,IAAwCC,iBAAiB,KAA7D,EAAoE;;gCAE1C,CAACjE,IAAzB;eACOwD,aAAP,CACE,KAAKD,wBAAL,CACE,OADF,EAEE,IAAI9C,SAAJ,CAAcsC,oBAAd,EAAoC,KAAK3B,iBAAL,CAAuBpB,IAA3D,CAFF,EAGE8B,MAHF,CADF;;;UASE0C,gBAAgBN,gBAAgB,IAAhC,IAAwCC,iBAAiB,KAA7D,EAAoE;;gCAE1C,CAACpE,IAAzB;eACOyD,aAAP,CACE,KAAKD,wBAAL,CACE,OADF,EAEE,IAAI9C,SAAJ,CAAcsC,oBAAd,EAAoC,KAAK3B,iBAAL,CAAuBrB,IAA3D,CAFF,EAGE+B,MAHF,CADF;;;UASE0C,gBAAgBJ,iBAAiB,IAAjC,IAAyCC,kBAAkB,KAA/D,EAAsE;;gCAE5C,CAACnE,KAAzB;eACOsD,aAAP,CACE,KAAKD,wBAAL,CACE,OADF,EAEE,IAAI9C,SAAJ,CAAcsC,oBAAd,EAAoC,KAAK3B,iBAAL,CAAuBlB,KAA3D,CAFF,EAGE4B,MAHF,CADF;;;UASE0C,gBAAgBF,eAAe,IAA/B,IAAuCC,gBAAgB,KAA3D,EAAkE;;gCAExC,CAACtE,GAAzB;eACOuD,aAAP,CACE,KAAKD,wBAAL,CACE,OADF,EAEE,IAAI9C,SAAJ,CAAcsC,oBAAd,EAAoC,KAAK3B,iBAAL,CAAuBnB,GAA3D,CAFF,EAGE6B,MAHF,CADF;;;UASE2C,kBAAkBT,gBAAgB,KAAlC,IAA2CC,iBAAiB,IAAhE,EAAsE;;gCAE5CjE,IAAxB;eACOwD,aAAP,CACE,KAAKD,wBAAL,CACE,SADF,EAEE,IAAI9C,SAAJ,CAAcsC,oBAAd,EAAoC,KAAK3B,iBAAL,CAAuBpB,IAA3D,CAFF,EAGE8B,MAHF,CADF;;;UASE2C,kBAAkBP,gBAAgB,KAAlC,IAA2CC,iBAAiB,IAAhE,EAAsE;;gCAE5CpE,IAAxB;eACOyD,aAAP,CACE,KAAKD,wBAAL,CACE,SADF,EAEE,IAAI9C,SAAJ,CAAcsC,oBAAd,EAAoC,KAAK3B,iBAAL,CAAuBrB,IAA3D,CAFF,EAGE+B,MAHF,CADF;;;UASE2C,kBAAkBL,iBAAiB,KAAnC,IAA4CC,kBAAkB,IAAlE,EAAwE;;gCAE9CnE,KAAxB;eACOsD,aAAP,CACE,KAAKD,wBAAL,CACE,SADF,EAEE,IAAI9C,SAAJ,CAAcsC,oBAAd,EAAoC,KAAK3B,iBAAL,CAAuBlB,KAA3D,CAFF,EAGE4B,MAHF,CADF;;;UASE2C,kBAAkBH,eAAe,KAAjC,IAA0CC,gBAAgB,IAA9D,EAAoE;;gCAE1CtE,GAAxB;eACOuD,aAAP,CACE,KAAKD,wBAAL,CACE,SADF,EAEE,IAAI9C,SAAJ,CAAcsC,oBAAd,EAAoC,KAAK3B,iBAAL,CAAuBnB,GAA3D,CAFF,EAGE6B,MAHF,CADF;;;UASEiB,yBAAyBgB,eAA7B,EAA8C;cACtC,IAAIW,KAAJ,CACJ,8CAA4CX,eAA5C,gBACYhB,oBADZ,CADI,CAAN;;;;;;;;;;;;;uCAaeH,MAvWrB,EAuW6B;UACrBjC,UAAU,IAAd;UACID,YAAY,CAAhB;;UAEIiE,QAAQ/B,OAAOgC,KAAP,CAAa,GAAb,CAAZ;UACIC,WAAWF,MAAMG,GAAN,EAAf;;YAEMC,OAAN,CAAc,gBAAQ;gBACZC,KAAKC,WAAL,EAAR;eACO,MAAL;yBACelF,IAAb;;eAEG,MAAL;yBACeC,IAAb;;eAEG,KAAL;yBACeC,GAAb;;eAEG,OAAL;yBACeC,KAAb;;;kBAGM,IAAIwE,KAAJ,UAAiB9B,MAAjB,6BAA+CoC,IAA/C,CAAN;;OAfN;;UAmBIH,SAASI,WAAT,MAA0B,KAAK7D,iBAAnC,EAAsD;kBAC1C,KAAKA,iBAAL,CAAuByD,SAASI,WAAT,EAAvB,CAAV;OADF,MAEO,IAAIJ,SAAS5B,MAAT,KAAoB,CAAxB,EAA2B;YAC5BiC,oBAAoB,KAAKtD,oBAAL,CAA0BiD,SAAS3B,UAAT,CAAoB,CAApB,CAA1B,CAAxB;qBACagC,kBAAkBxE,SAA/B;kBACUwE,kBAAkBvE,OAA5B;OAHK,MAIA;cACC,IAAI+D,KAAJ,UAAiB9B,MAAjB,2BAA6CiC,QAA7C,CAAN;;;aAGK,IAAIpE,SAAJ,CAAcC,SAAd,EAAyBC,OAAzB,CAAP;;;;;;;;;;;;yCASmBY,QApZvB,EAoZiC;aACtB,KAAKJ,mBAAL,CAAyBI,QAAzB,KAAsC,IAA7C;;;;;;;;;;8CAOwBO,MA5Z5B,EA4ZoC;UAC5B,CAACA,MAAL,EAAa;eACJ,KAAP;;;aAGKqD,WAAWrD,MAAX,CAAP;;;;;;;AAIJ,IAAMsD,kCAAkC;MAClC,IAAI3E,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CADkC;MAElC,IAAIA,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAFkC;MAGlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,GAArB,CAHkC;MAIlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAJkC;MAKlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CALkC;MAMlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CANkC;MAOlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAPkC;MAQlC,IAAIO,SAAJ,CAAc,CAAd,EAAiB,GAAjB,CARkC;MASlC,IAAIA,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CATkC;MAUlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAVkC;MAWlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAXkC;MAYlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,GAArB,CAZkC;MAalC,IAAIO,SAAJ,CAAc,CAAd,EAAiB,GAAjB,CAbkC;MAclC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,GAAjB,CAdkC;MAelC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,GAAjB,CAfkC;MAgBlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,GAAjB,CAhBkC;MAiBlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAjBkC;MAkBlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAlBkC;MAmBlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAnBkC;MAoBlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CApBkC;MAqBlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CArBkC;MAsBlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAtBkC;MAuBlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAvBkC;MAwBlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAxBkC;MAyBlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAzBkC;MA0BlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CA1BkC;MA2BlC,IAAIA,SAAJ,CAAcP,KAAd,EAAqB,GAArB,CA3BkC;MA4BlC,IAAIO,SAAJ,CAAc,CAAd,EAAiB,GAAjB,CA5BkC;MA6BlC,IAAIA,SAAJ,CAAcP,KAAd,EAAqB,GAArB,CA7BkC;MA8BlC,IAAIO,SAAJ,CAAc,CAAd,EAAiB,GAAjB,CA9BkC;MA+BlC,IAAIA,SAAJ,CAAcP,KAAd,EAAqB,GAArB,CA/BkC;MAgClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,GAArB,CAhCkC;MAiClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAjCkC;MAkClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAlCkC;MAmClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAnCkC;MAoClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CApCkC;MAqClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CArCkC;MAsClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAtCkC;MAuClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAvCkC;MAwClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAxCkC;MAyClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAzCkC;MA0ClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CA1CkC;MA2ClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CA3CkC;MA4ClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CA5CkC;MA6ClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CA7CkC;MA8ClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CA9CkC;MA+ClC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CA/CkC;MAgDlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAhDkC;MAiDlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAjDkC;MAkDlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAlDkC;MAmDlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAnDkC;MAoDlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CApDkC;MAqDlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CArDkC;MAsDlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAtDkC;MAuDlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAvDkC;MAwDlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAxDkC;MAyDlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CAzDkC;MA0DlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CA1DkC;MA2DlC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CA3DkC;MA4DlC,IAAIO,SAAJ,CAAc,CAAd,EAAiB,GAAjB,CA5DkC;MA6DlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,GAAjB,CA7DkC;MA8DlC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,GAAjB,CA9DkC;MA+DlC,IAAIA,SAAJ,CAAcP,KAAd,EAAqB,EAArB,CA/DkC;MAgElC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,GAArB,CAhEkC;MAiElC,IAAIO,SAAJ,CAAc,CAAd,EAAiB,GAAjB,CAjEkC;MAkElC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAlEkC;MAmElC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAnEkC;MAoElC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CApEkC;OAqEjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CArEiC;OAsEjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAtEiC;OAuEjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAvEiC;OAwEjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAxEiC;OAyEjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAzEiC;OA0EjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CA1EiC;OA2EjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CA3EiC;OA4EjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CA5EiC;OA6EjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CA7EiC;OA8EjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CA9EiC;OA+EjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CA/EiC;OAgFjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAhFiC;OAiFjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAjFiC;OAkFjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAlFiC;OAmFjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAnFiC;OAoFjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CApFiC;OAqFjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CArFiC;OAsFjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAtFiC;OAuFjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAvFiC;OAwFjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAxFiC;OAyFjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAzFiC;OA0FjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CA1FiC;OA2FjC,IAAIA,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CA3FiC;OA4FjC,IAAIA,SAAJ,CAAcP,KAAd,EAAqB,GAArB,CA5FiC;OA6FjC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,GAArB,CA7FiC;OA8FjC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,GAArB,CA9FiC;OA+FjC,IAAIO,SAAJ,CAAcP,KAAd,EAAqB,GAArB,CA/FiC;CAAxC;;AAkGA,IAAMmF,gCAAgC;aACzB,CADyB;OAE/B,CAF+B;SAG7B,EAH6B;SAI7B,EAJ6B;QAK9B,EAL8B;OAM/B,EAN+B;SAO7B,EAP6B;YAQ1B,EAR0B;UAS5B,EAT4B;UAU5B,EAV4B;YAW1B,EAX0B;OAY/B,EAZ+B;QAa9B,EAb8B;QAc9B,EAd8B;MAehC,EAfgC;SAgB7B,EAhB6B;QAiB9B,EAjB8B;UAkB5B,EAlB4B;UAmB5B,EAnB4B;QAoB9B,EApB8B;MAqBhC,GArBgC;MAsBhC,GAtBgC;MAuBhC,GAvBgC;MAwBhC,GAxBgC;MAyBhC,GAzBgC;MA0BhC,GA1BgC;MA2BhC,GA3BgC;MA4BhC,GA5BgC;MA6BhC,GA7BgC;OA8B/B,GA9B+B;OA+B/B,GA/B+B;OAgC/B;CAhCP;;;;;;;AAwCArE,SAASsE,UAAT,GAAsB,IAAItE,QAAJ,CACpBoE,+BADoB,EAEpBC,6BAFoB,CAAtB;;;;"}